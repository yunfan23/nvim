snippet b "Add breakpoint" b
breakpoint()
endsnippet

snippet exit "Add sys.exit" b
import sys; sys.exit()
endsnippet

snippet templ-script "Template: Script with traceback" b
#!/usr/bin/env python
import traceback
import pdb
import sys
def main():
	# some WIP code that maybe raises an exception
	raise BaseException("oh no, exception!")
	return 0
if __name__ == "__main__":
	try:
		ret = main()
	except:
		traceback.print_exc()
		pdb.post_mortem()
	sys.exit(ret)
endsnippet

snippet from
	from ${1:package} import ${0:module}
endsnippet

# Module Docstring
snippet docs
	"""
	File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${0}
	"""
endsnippet

snippet wh
	while ${1:condition}:
		${0:${VISUAL}}
endsnippet

# dowh - does the same as do...while in other languages
snippet dowh
	while True:
		${1}
		if ${0:condition}:
			break
endsnippet

snippet with
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}
endsnippet

snippet awith
	async with ${1:expr} as ${2:var}:
		${0:${VISUAL}}
endsnippet

# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}
endsnippet

snippet cla
	class ${1:class_name}:
		"""${0:description}"""
endsnippet

snippet clai
	class ${1:class_name}:
		"""${2:description}"""
		def __init__(self, ${3:args}):
			${0}
endsnippet

# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}
endsnippet

snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
endsnippet

# New Method
snippet defi
	def __init__(self, ${1:args}):
		${0}
endsnippet
snippet defm
	def ${1:mname}(self, ${2:arg}):
		${0}
endsnippet
snippet adefm
	async def ${1:mname}(self, ${2:arg}):
		${0}
endsnippet
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
		def fdel(self):
			${0:del self._$1}
		return locals()
	$1 = property(**$1())
endsnippet
# Ifs
snippet if
	if ${1:condition}:
		${0:${VISUAL}}
endsnippet
snippet el
	else:
		${0:${VISUAL}}
endsnippet
snippet ei
	elif ${1:condition}:
		${0:${VISUAL}}
endsnippet
# For
snippet for
	for ${1:item} in ${2:items}:
		${0}
endsnippet

# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}
endsnippet
snippet ret
	return ${0}
endsnippet
snippet .
	self.
endsnippet
snippet try Try/Except
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${0:raise $3}
endsnippet
snippet trye
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${0}
endsnippet
snippet tryf
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${0}
endsnippet
snippet tryef
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}
endsnippet
# __magic__
snippet _
	__${1:init}__
endsnippet
# python debugger (pdb)
snippet pdb
import pdb; pdb.set_trace()
endsnippet

# argparse
snippet addp
	parser = ${VISUAL:argparse.}ArgumentParser()
endsnippet
snippet addsp
	${0:sub_parser} = parser.add_subparsers().add_parser("${1:name}")
endsnippet
snippet addarg
	parser.add_argument("${0:short_arg}", "${1:long_arg}", default=${2:None}, help="${3:Help text}")
endsnippet
snippet addnarg
	parser.add_argument("${0:arg}", nargs="${1:*}", default"${2:None}, help="${3:Help text}")
endsnippet
snippet addaarg
	parser.add_argument("${0:arg}", "${1:long_arg}", action="${2:store_true}", default=${3:False}, help="${4:Help text}")
endsnippet
snippet pargs
	"${VISUAL:return }"parser.parse_args()
endsnippet
# logging
# glog = get log
snippet glog
	import logging
	LOGGER = logging.getLogger(${0:__name__})
endsnippet
snippet le
	LOGGER.error(${0:msg})
endsnippet
# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
	LOGGER.debug(${0:msg})
endsnippet
snippet lw
	LOGGER.warning(${0:msg})
endsnippet
snippet lc
	LOGGER.critical(${0:msg})
endsnippet
snippet li
	LOGGER.info(${0:msg})
endsnippet
snippet epydoc
	"""${1:Description}
	@param ${2:param}: ${3: Description}
	@type  $2: ${4: Type}
	@return: ${5: Description}
	@rtype : ${6: Type}
	@raise e: ${0: Description}
	"""
endsnippet
# comprehensions

snippet repr "methods implementing string representation"
	def __repr__(self):
		${1:pass}
	def __str__(self):
		${2:pass}
	def __unicode__(self):
		${3:pass}
endsnippet

snippet head "Python source file header" b
"""
Description: $1
Author: Yunfan Zhang (yunfan.zhang23@gmail.com)
Created: `!v strftime("%Y-%m-%d %H:%M:%S%z")`
"""
$0
endsnippet

snippet print "Print value of some variable"
print("$1".format($2))
$0
endsnippet

snippet impa "import FOO as BAR" b
import ${1:FOO} as ${2:BAR}
endsnippet

snippet main "Main function boilerplate" b
def main():
	$0


if __name__ == "__main__":
	main()
endsnippet
